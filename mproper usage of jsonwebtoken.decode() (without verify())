const jwt = require('jsonwebtoken');
const express = require('express');
const app = express();

const SECRET_KEY = 'supersecretkey'; // Secret key for signing tokens (do not expose in real systems)

// Sample token creation (to simulate an existing token)
const sampleToken = jwt.sign({ username: 'user', role: 'user' }, SECRET_KEY, { expiresIn: '1h' });
console.log(`Sample Token: ${sampleToken}`);

app.use(express.json());

// Vulnerable endpoint: Decode JWT without verification
app.post('/login', (req, res) => {
    const token = req.body.token;

    // Decode token WITHOUT verification
    const decoded = jwt.decode(token);

    // Simulate user privilege escalation by trusting the decoded payload
    if (decoded && decoded.role === 'admin') {
        res.send(`Welcome, ${decoded.username}. You are an admin.`);
    } else if (decoded) {
        res.send(`Welcome, ${decoded.username}. You are a regular user.`);
    } else {
        res.status(400).send('Invalid token.');
    }
});

// Start the server
app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});





  //prevent 





  app.post('/login', (req, res) => {
    const token = req.body.token;

    try {
        // Verify token and ensure integrity
        const decoded = jwt.verify(token, SECRET_KEY);

        if (decoded.role === 'admin') {
            res.send(`Welcome, ${decoded.username}. You are an admin.`);
        } else {
            res.send(`Welcome, ${decoded.username}. You are a regular user.`);
        }
    } catch (err) {
        res.status(401).send('Invalid or tampered token.');
    }
});

